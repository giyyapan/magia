// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Dict = {
    QualityLevel: [50, 150, 400, 800, 1200, 2000],
    TraitName: {
      life: "生命",
      heal: "治疗",
      fire: "火焰",
      water: "水",
      earth: "地",
      ice: "冰",
      air: "空气",
      minus: "负能量",
      spirit: "灵能",
      snow: "雪",
      explode: "爆炸",
      burn: "燃烧",
      poison: "毒",
      clear: "净化",
      muddy: "泥泞",
      brave: "勇气",
      corrosion: "腐蚀",
      stun: "晕眩",
      fog: "雾气",
      iron: "钢",
      freeze: "霜冻",
      traitTime: "时",
      space: "空"
    },
    TraitLevel: {
      1: "life,fire,wind,air,earth",
      2: "heal,minus,spirit,snow,poison,clear,fog,iron,traitTime,space",
      3: "explode,burn,freeze,corrosion"
    }
  };

  window.Widget = Suzaku.Widget;

  window.EventEmitter = Suzaku.EventEmitter;

  window.Clock = (function(_super) {
    __extends(Clock, _super);

    function Clock(rate, callback) {
      Clock.__super__.constructor.call(this, null);
      this.setRate(rate || "normal");
      this.currentDelay = 0;
      this.paused = false;
      if (callback) {
        this.on("next", callback);
      }
    }

    Clock.prototype.setRate = function(value) {
      switch (value) {
        case "normal":
          value = 13;
          break;
        case "fast":
          value = 20;
          break;
        case "slow":
          value = 8;
          break;
        default:
          value = parseInt(value);
      }
      this.frameRate = value;
      return this.frameDelay = parseInt(1000 / this.frameRate);
    };

    Clock.prototype.tick = function(tickDelay) {
      var _results;
      this.currentDelay += tickDelay;
      _results = [];
      while (this.currentDelay > this.frameDelay) {
        this.currentDelay -= this.frameDelay;
        if (!this.paused) {
          _results.push(this.emit("next"));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Clock;

  })(Suzaku.EventEmitter);

  window.Menu = (function(_super) {
    __extends(Menu, _super);

    function Menu(tpl) {
      Menu.__super__.constructor.call(this, tpl);
      this.isMenu = true;
      this.z = 0;
      this.UILayer = {
        J: $(GameConfig.UILayerId),
        dom: $(GameConfig.UILayerId).get(0)
      };
    }

    Menu.prototype.init = function() {
      this.UILayer.J.hide();
      this.UILayer.J.html("");
      return this.appendTo(this.UILayer);
    };

    Menu.prototype.show = function(callback) {
      this.init();
      this.J.show();
      return this.UILayer.J.fadeIn("fast", callback);
    };

    Menu.prototype.hide = function(callback) {
      var _this = this;
      return this.UILayer.J.fadeOut("fast", function() {
        _this.J.hide();
        if (callback) {
          return callback();
        }
      });
    };

    Menu.prototype.onDraw = function() {
      return this.emit("render", this);
    };

    return Menu;

  })(Widget);

}).call(this);
