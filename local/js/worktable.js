// Generated by CoffeeScript 1.6.3
(function() {
  var DetailsBox, ReactionBox, SourceItem, WorktableMenu,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ReactionBox = (function(_super) {
    __extends(ReactionBox, _super);

    function ReactionBox(tpl, menu) {
      ReactionBox.__super__.constructor.call(this, tpl);
      this.menu = menu;
      this.worktable = menu.worktable;
      this.traitsItems = {};
      this.reactions = [];
      this.reactionBtns = {};
      this.initReactions();
    }

    ReactionBox.prototype.initReactions = function() {
      var fromTraitsArr, obj, r, t, traits, _i, _j, _len, _len1, _ref, _results;
      _ref = this.worktable.db.rules.get("reaction");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        fromTraitsArr = r.split("->")[0].split(",");
        obj = {
          from: {
            length: fromTraitsArr.length
          },
          to: r.split("->")[1]
        };
        for (_j = 0, _len1 = fromTraitsArr.length; _j < _len1; _j++) {
          traits = fromTraitsArr[_j];
          t = traits.split(":");
          obj.from[t[0]] = parseInt(t[1]);
        }
        _results.push(this.reactions.push(obj));
      }
      return _results;
    };

    ReactionBox.prototype.putInItem = function(playerItem) {
      var i, name, old, value, _ref;
      _ref = playerItem.traits;
      for (name in _ref) {
        value = _ref[name];
        if (!this.traitsItems[name]) {
          this.traitsItems[name] = new TraitsItem(name, value).appendTo(this.UI['current-traits-list']);
        } else {
          i = this.traitsItems[name];
          old = i.traitsValue;
          i.changeValue(parseInt(value * value / (old + value) + old));
        }
      }
      return this.tryReaction();
    };

    ReactionBox.prototype.tryReaction = function() {
      var avail, name, r, value, _i, _len, _ref, _ref1, _results;
      _ref = this.reactions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        avail = 0;
        _ref1 = r.from;
        for (name in _ref1) {
          value = _ref1[name];
          if (!this.traitsItems[name]) {
            avail = 0;
            break;
          }
          if (this.traitsItems[name].traitsValue >= value) {
            if (avail = 0) {
              avail = 2;
            }
          } else {
            avail = 1;
          }
        }
        switch (avail) {
          case 0:
            continue;
          case 1:
            _results.push(this.addReactionBtn(r, false));
            break;
          case 2:
            _results.push(this.addReactionBtn(r, true));
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    ReactionBox.prototype.addReactionBtn = function(r, avail) {
      var btn, tpl;
      if (this.reactionBtns[r.to]) {
        return this.reactionBtns[r.to].update(avail);
      } else {
        tpl = this.UI["reaction-btn-tpl-" + r.from.length];
        btn = new ReactionBtn(tpl, r, avail);
        btn.appendTo(this.UI['avail-reaction-box']);
        return this.reactionBtns[r.to] = btn;
      }
    };

    return ReactionBox;

  })(Widget);

  DetailsBox = (function(_super) {
    __extends(DetailsBox, _super);

    function DetailsBox(menu) {
      var _this = this;
      DetailsBox.__super__.constructor.apply(this, arguments);
      this.menu = menu;
      this.worktable = menu.worktable;
      this.locked = false;
      this.UI['use-btn'].J.html("添加");
      this.UI['use-btn'].onclick = function() {
        if (_this.locked) {
          return;
        }
        if (_this.currentItem) {
          return _this.worktable.putInItem(_this.currentItem);
        }
      };
      this.UI['header-flag'].J.remove();
      this.UI['cancel-btn'].onclick = function() {
        _this.menu.UI['source-list'].J.find("li").removeClass("selected");
        return _this.J.fadeOut(100);
      };
    }

    return DetailsBox;

  })(ItemDetailsBox);

  SourceItem = (function(_super) {
    __extends(SourceItem, _super);

    function SourceItem(tpl, menu, playerItem) {
      var _this = this;
      SourceItem.__super__.constructor.call(this, tpl);
      this.originData = playerItem.originData;
      this.playerItem = playerItem;
      console.log(this);
      if (this.UI.img) {
        this.UI.img.src = this.originData.img;
      }
      this.UI.name.J.text(this.originData.name);
      if (playerItem.number) {
        this.UI.number.J.text(playerItem.number);
      }
      this.dom.onclick = function(evt) {
        return menu.detailsBox.showItemDetails(_this);
      };
    }

    SourceItem.prototype.update = function() {
      if (this.playerItem.number) {
        return this.UI.number.J.text(this.playerItem.number);
      }
    };

    return SourceItem;

  })(Widget);

  WorktableMenu = (function(_super) {
    __extends(WorktableMenu, _super);

    function WorktableMenu(tpl, worktable) {
      var _this = this;
      WorktableMenu.__super__.constructor.call(this, tpl);
      this.worktable = worktable;
      this.player = worktable.player;
      this.detailsBox = new DetailsBox(this);
      this.detailsBox.appendTo(this.UI['item-details-box-wrapper']);
      this.reactionBox = new ReactionBox(this.UI['reaction-box'], this);
      this.initItems();
      this.UI['exit-btn'].onclick = function() {
        return _this.worktable.close();
      };
    }

    WorktableMenu.prototype.initItems = function() {
      var i, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.player.backpack;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i.type === "item") {
          this.addSourceItem(i);
        }
      }
      _ref1 = this.player.storage;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        i = _ref1[_j];
        if (i.type === "item") {
          _results.push(this.addSourceItem(i));
        }
      }
      return _results;
    };

    WorktableMenu.prototype.addSourceItem = function(item) {
      var w;
      w = new SourceItem(this.UI['source-item-tpl'].innerHTML, this, item);
      return w.appendTo(this.UI['source-list']);
    };

    return WorktableMenu;

  })(Menu);

  window.Worktable = (function(_super) {
    __extends(Worktable, _super);

    function Worktable(home) {
      Worktable.__super__.constructor.apply(this, arguments);
      this.home = home;
      this.game = home.game;
      this.db = this.game.db;
      this.player = this.game.player;
      this.floor = home.secondFloor;
      this.menu = new WorktableMenu(Res.tpls['worktable-menu'], this);
      this.menu.show();
    }

    Worktable.prototype.putInItem = function(item) {
      var _this = this;
      if (item.playerItem.number > 1) {
        item.playerItem.number -= 1;
        item.update();
      } else {
        this.player.removeThing(item.playerItem);
        this.menu.detailsBox.locked = true;
        this.menu.detailsBox.J.fadeOut("fast", function() {
          return _this.menu.detailsBox.locked = false;
        });
        item.J.slideUp(150, function() {
          return item.remove();
        });
      }
      return this.menu.reactionBox.putInItem(item.playerItem);
    };

    Worktable.prototype.close = function() {
      var _this = this;
      this.menu.hide();
      return this.fadeOut(150, function() {
        return _this.emit("close");
      });
    };

    return Worktable;

  })(Layer);

}).call(this);
