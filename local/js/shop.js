// Generated by CoffeeScript 1.6.3
(function() {
  var ShopItemDetailsBox, ShopListItem, ShopMenu,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ShopItemDetailsBox = (function(_super) {
    __extends(ShopItemDetailsBox, _super);

    function ShopItemDetailsBox(menu) {
      var _this = this;
      ShopItemDetailsBox.__super__.constructor.call(this);
      this.menu = menu;
      this.shop = this.menu.shop;
      this.UI['cancel-btn'].onclick = function() {
        var w, _i, _len, _ref, _results;
        _this.J.fadeOut("fast");
        _ref = _this.menu.listItems;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          w = _ref[_i];
          _results.push(w.J.removeClass("selected"));
        }
        return _results;
      };
    }

    ShopItemDetailsBox.prototype.showItemDetails = function(mode, item) {
      var basicPrice, price,
        _this = this;
      ShopItemDetailsBox.__super__.showItemDetails.call(this, item);
      basicPrice = item.playerThing.price;
      switch (mode) {
        case "playerBuy":
          price = basicPrice * parseFloat(this.shop.getDataByRelationship("playerBuyPrice")) >> 0;
          this.UI.price.J.text("$" + price);
          if (price > this.shop.player.money) {
            this.css3Animate.call(this.UI.price, "animate-warning");
          }
          this.UI['use-btn'].J.text("购买");
          return this.UI['use-btn'].onclick = function() {
            return _this.playerBuyItem(item, price);
          };
        case "playerSell":
          console.log(basicPrice, this.shop.getDataByRelationship("playerSellPrice"));
          price = basicPrice * parseFloat(this.shop.getDataByRelationship("playerSellPrice")) >> 0;
          this.UI.price.J.text("$" + price);
          this.UI['use-btn'].J.text("出售");
          return this.UI['use-btn'].onclick = function() {
            return _this.playerSellItem(item, price);
          };
      }
    };

    ShopItemDetailsBox.prototype.playerBuyItem = function(item, price) {
      var player;
      player = this.shop.player;
      if (price > player.money) {
        this.css3Animate.call(this.UI.price, "animate-warning");
        return new MsgBox("购买失败", "我的钱好像不够..");
      }
      player.money -= price;
      this.menu.updateMoney();
      switch (item.type) {
        case "item":
          player.getItem("backpack", item.playerItem);
          break;
        case "supplies":
          player.getSupplies("backpack", item.playerSupplies);
          break;
        case "equipment":
          player.getEquipment("backpack", item.playerEquipment);
          break;
        default:
          console.error("invailid type", item.type);
      }
      player.saveData();
      return new MsgBox("购买成功", "获得了一个 " + item.dspName, 420);
    };

    ShopItemDetailsBox.prototype.playerSellItem = function(item, price) {
      var player;
      player = this.shop.player;
      player.money += price;
      this.menu.updateMoney();
      if (item.playerItem && item.playerItem.number > 1) {
        item.playerItem.number -= 1;
      } else {
        player.removeThing(item.playerThing);
        this.hide();
        this.menu.removeListItem(item);
      }
      player.saveData();
      return new MsgBox("出售成功", "获得了一个 " + item.dspName, 420);
    };

    return ShopItemDetailsBox;

  })(ItemDetailsBox);

  ShopListItem = (function(_super) {
    __extends(ShopListItem, _super);

    function ShopListItem(tpl, mode, playerThing, menu) {
      ShopListItem.__super__.constructor.call(this, tpl, playerThing);
      this.menu = menu;
      this.mode = mode;
      this.UI.name.J.text(this.dspName);
    }

    ShopListItem.prototype.active = function() {
      return this.menu.detailsBox.showItemDetails(this.mode, this);
    };

    return ShopListItem;

  })(ListItem);

  ShopMenu = (function(_super) {
    __extends(ShopMenu, _super);

    function ShopMenu(shop) {
      var _this = this;
      this.shop = shop;
      ShopMenu.__super__.constructor.call(this, Res.tpls['shop-menu']);
      this.detailsBox = new ShopItemDetailsBox(this).appendTo(this.UI['right-section']);
      this.listItems = [];
      this.UI['service-traid'].onclick = function() {
        return _this.initTraid();
      };
      this.UI['service-conversation'].onclick = function() {
        return shop.conversation();
      };
      this.UI['exit'].onclick = function() {
        return shop.exit();
      };
      this.UI['player-buy-mode'].onclick = function() {
        return _this.playerBuyMode();
      };
      this.UI['player-sell-mode'].onclick = function() {
        return _this.playerSellMode();
      };
      this.UI['end-traid'].onclick = function() {
        _this.shop.showServiceDialog();
        return _this.showServiceOptions();
      };
      this.show();
    }

    ShopMenu.prototype.removeListItem = function(item) {
      var i, newArr, _i, _len, _ref;
      newArr = [];
      _ref = this.listItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (i !== item) {
          newArr.push(i);
        } else {
          i.J.slideUp("fast", function() {
            return $(this).remove();
          });
        }
      }
      return this.listItems = newArr;
    };

    ShopMenu.prototype.showServiceOptions = function() {
      this.UI['left-section'].J.fadeOut("fast");
      this.detailsBox.J.fadeOut("fast");
      return this.UI['service-options'].J.fadeIn("fast");
    };

    ShopMenu.prototype.hideServiceOptions = function() {
      return this.UI['service-options'].J.fadeOut("fast");
    };

    ShopMenu.prototype.initTraid = function() {
      this.hideServiceOptions();
      this.shop.dialogBox.hide();
      this.updateMoney();
      return this.playerBuyMode();
    };

    ShopMenu.prototype.updateMoney = function() {
      return this.UI['player-money'].J.text(this.shop.player.money);
    };

    ShopMenu.prototype.playerSellMode = function() {
      var items, playerThing, sellableType, _i, _len, _ref;
      this.detailsBox.J.fadeOut("fast");
      this.UI['left-section'].J.fadeIn("fast");
      this.UI['player-sell-mode'].J.addClass("selected");
      this.UI['player-buy-mode'].J.removeClass("selected");
      items = [];
      sellableType = this.shop.originData.sellableType;
      _ref = this.shop.player.backpack;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        playerThing = _ref[_i];
        if (playerThing.type === sellableType) {
          items.push(playerThing);
        }
      }
      return this.addItems("playerSell", items);
    };

    ShopMenu.prototype.playerBuyMode = function() {
      var ItemClass, data, itemData, items, _i, _len, _ref;
      console.log("fuck");
      this.detailsBox.J.fadeOut("fast");
      this.UI['left-section'].J.fadeIn("fast");
      this.UI['player-buy-mode'].J.addClass("selected");
      this.UI['player-sell-mode'].J.removeClass("selected");
      data = this.shop.originData;
      items = [];
      switch (data.buyableType) {
        case "supplies":
          ItemClass = PlayerSupplies;
          break;
        case "equipment":
          ItemClass = PlayerEquipment;
          break;
        case "item":
          ItemClass = PlayerItem;
      }
      _ref = this.shop.getDataByRelationship(data.buyableItems);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        itemData = _ref[_i];
        items.push(new ItemClass(this.shop.db, itemData.name, itemData));
      }
      return this.addItems("playerBuy", items);
    };

    ShopMenu.prototype.addItems = function(type, items) {
      var playerThing, w, _i, _len, _results;
      console.log(items);
      this.listItems = [];
      this.UI['item-list'].J.html("");
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        playerThing = items[_i];
        w = new ShopListItem(this.UI['list-item-tpl'].innerHTML, type, playerThing, this);
        w.appendTo(this.UI['item-list']);
        _results.push(this.listItems.push(w));
      }
      return _results;
    };

    return ShopMenu;

  })(Menu);

  window.Shop = (function(_super) {
    __extends(Shop, _super);

    function Shop(game, name) {
      Shop.__super__.constructor.call(this, game);
      this.db = game.db;
      this.originData = this.db.shops.get(name);
      this.player = this.game.player;
      this.relationship = this.player.relationships[this.originData.npc];
      this.bg = new Layer(Res.imgs[this.originData.bg]);
      this.drawQueueAdd(this.bg);
      this.menu = new ShopMenu(this);
      this.initWelcomDialog();
    }

    Shop.prototype.exit = function() {
      var _this = this;
      this.menu.hideServiceOptions();
      return this.dialogBox.display({
        text: this.originData.exitText,
        nostop: true
      }, function() {
        return _this.dialogBox.hide(function() {
          return _this.bg.fadeOut("fast", function() {
            return _this.game.switchStage("worldMap");
          });
        });
      });
    };

    Shop.prototype.conversation = function() {
      var text,
        _this = this;
      console.log("conversation");
      this.menu.hideServiceOptions();
      text = this.getDataByRelationship(this.originData.conversations);
      return this.dialogBox.display({
        text: text
      }, function() {
        _this.showServiceDialog();
        return _this.menu.showServiceOptions();
      });
    };

    Shop.prototype.getDataByRelationship = function(from) {
      var data, found, required;
      if (typeof from === "string") {
        from = this.originData[from];
      }
      if (!from) {
        return console.error("invailid from", from);
      }
      found = null;
      for (required in from) {
        data = from[required];
        if (parseInt(required) <= this.relationship) {
          found = data;
        } else {
          break;
        }
      }
      return found;
    };

    Shop.prototype.showServiceDialog = function() {
      return this.dialogBox.display({
        text: Utils.random(this.originData.waitText),
        nostop: true
      });
    };

    Shop.prototype.initWelcomDialog = function() {
      var text,
        _this = this;
      this.dialogBox = new DialogBox();
      this.dialogBox.show();
      text = this.getDataByRelationship(this.originData.welcomeText);
      return this.dialogBox.display({
        text: text,
        speaker: this.originData.npcName,
        nostop: true
      }, function() {
        return _this.menu.showServiceOptions();
      });
    };

    return Shop;

  })(Stage);

}).call(this);
