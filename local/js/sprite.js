// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Sprite = (function(_super) {
    __extends(Sprite, _super);

    function Sprite(x, y, originData) {
      var move;
      Sprite.__super__.constructor.call(this, x, y);
      this.originData = originData;
      this.dspName = originData.name;
      this.frameRate = 10;
      this.frameDelay = parseInt(1000 / this.frameRate);
      this.currentDelay = 0;
      this.currentFrame = 0;
      this.initSprite();
      this.startFrame = 0;
      this.endFrame = 0;
      this.defaultMovement = "normal";
      this.useMovement("normal", true);
      move = this.movements["normal"];
      this.currentFrame = (move.startFrame - 1) + Math.round(Math.random() * move.length);
    }

    Sprite.prototype.onDraw = function(context, tickDelay) {
      this._handleMovementAnimate(tickDelay);
      return Sprite.__super__.onDraw.call(this, context, tickDelay);
    };

    Sprite.prototype.initSprite = function() {
      var arr, data, name, _ref;
      this.spriteMap = this.originData.sprite.map;
      this.spriteData = this.originData.sprite.data;
      this.movements = {};
      _ref = this.originData.movements;
      for (name in _ref) {
        data = _ref[name];
        arr = data.split(",");
        this.movements[name] = {
          startFrame: parseInt(arr[0]),
          endFrame: parseInt(arr[1]),
          length: parseInt(arr[1]) - parseInt(arr[0])
        };
      }
      this.defaultAnchor = {
        x: parseInt(this.originData.anchor.split(",")[0]),
        y: parseInt(this.originData.anchor.split(",")[1])
      };
      return this.setAnchor(this.defaultAnchor);
    };

    Sprite.prototype.useMovement = function(name, loopMovement) {
      if (loopMovement == null) {
        loopMovement = false;
      }
      if (loopMovement) {
        this.defaultMovement = name;
      }
      this.startFrame = this.movements[name].startFrame;
      this.endFrame = this.movements[name].endFrame;
      return this.currentFrame = -1;
    };

    Sprite.prototype._handleMovementAnimate = function(tickDelay) {
      var _results;
      this.currentDelay += tickDelay;
      _results = [];
      while (this.currentDelay > this.frameDelay) {
        this.currentDelay -= this.frameDelay;
        _results.push(this._nextFrame());
      }
      return _results;
    };

    Sprite.prototype._nextFrame = function() {
      var ax, ay, data, frameData, realFrame, resHeight, resWidth, resX, resY;
      this.currentFrame += 1;
      realFrame = this.startFrame + this.currentFrame;
      if (realFrame > this.endFrame) {
        this.useMovement(this.defaultMovement);
        return this._nextFrame();
      } else {
        data = this.spriteData.frames[realFrame];
        if (!data) {
          console.error("movement frame out of range!", this, realFrame);
          return;
        }
        ax = this.defaultAnchor.x - data.spriteSourceSize.x;
        ay = this.defaultAnchor.y - data.spriteSourceSize.y;
        frameData = data.frame;
        resX = frameData.x;
        resY = frameData.y;
        resWidth = frameData.w;
        resHeight = frameData.h;
        this.width = frameData.w;
        this.height = frameData.h;
        this.setAnchor(ax, ay);
        return this.setImg(this.spriteMap, resX, resY, resWidth, resHeight);
      }
    };

    return Sprite;

  })(Drawable);

}).call(this);
