// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.PopupBox = (function(_super) {
    __extends(PopupBox, _super);

    function PopupBox(tpl) {
      var self;
      tpl = tpl || Res.tpls['popup-box'];
      PopupBox.__super__.constructor.call(this, tpl);
      this.box = this.UI.box;
      this.J.hide();
      this.box.J.hide();
      this.UILayer = $(GameConfig.UILayerId);
      self = this;
      this.UI['close'].onclick = function() {
        return self.close();
      };
      this.UI['accept'].onclick = function() {
        return self.accept();
      };
    }

    PopupBox.prototype.show = function() {
      this.appendTo(this.UILayer);
      this.J.fadeIn("fast");
      this.box.J.show();
      return this.box.J.addClass("animate-popup");
    };

    PopupBox.prototype.close = function() {
      var self,
        _this = this;
      self = this;
      this.J.fadeOut("fast");
      return this.box.J.animate({
        top: "-=30px",
        opacity: 0
      }, "fast", function() {
        _this.box.J.css("top", 0);
        _this.box.J.removeClass("animate-popup");
        self.remove();
        return self = null;
      });
    };

    PopupBox.prototype.accept = function() {
      console.log(this, "accept");
      this.emit("accept");
      return this.close();
    };

    return PopupBox;

  })(Widget);

  window.TraitsItem = (function(_super) {
    __extends(TraitsItem, _super);

    function TraitsItem(name, value) {
      TraitsItem.__super__.constructor.call(this, Res.tpls['traits-item']);
      this.traitsName = name;
      this.traitsValue = value;
      this.lv = 1;
      this.UI.name.J.text(Dict.TraitsName[this.traitsName]);
      this.UI.name.J.addClass(this.traitsName);
      this.changeValue(this.traitsValue);
    }

    TraitsItem.prototype.changeValue = function(value) {
      var activeDom, index, levelData, v, width, _i, _len;
      this.traitsValue = value;
      levelData = Dict.QualityLevel;
      for (index = _i = 0, _len = levelData.length; _i < _len; index = ++_i) {
        v = levelData[index];
        if (value < v) {
          break;
        }
      }
      this.lv = parseInt(index + 1);
      this.UI['traits-holder'].J.removeClass("lv1", "lv2", "lv3", "lv4", "lv5", "lv6");
      this.UI['traits-holder'].J.addClass("lv" + this.lv);
      this.J.find(".lv").removeClass("active");
      this.J.find(".filled").css("width", "100%");
      activeDom = this.UI["lv" + this.lv];
      activeDom.J.addClass("active");
      width = (value - (levelData[index - 1] || 0)) / (levelData[index] - (levelData[index - 1] || 0)) * 100;
      activeDom.J.find(".filled").css("width", "" + (parseInt(width)) + "%");
      this.UI.cursor.J.appendTo(activeDom);
      return this.UI.cursor.J.animate({
        left: "" + (parseInt(width) - 1) + "%"
      }, 10);
    };

    return TraitsItem;

  })(Widget);

  window.ItemDetailsBox = (function(_super) {
    __extends(ItemDetailsBox, _super);

    function ItemDetailsBox(tpl) {
      ItemDetailsBox.__super__.constructor.call(this, Res.tpls['item-details-box']);
      this.currentItem = null;
    }

    ItemDetailsBox.prototype.showItemDetails = function(item) {
      this.UI['content'].J.hide();
      if (this.currentItem) {
        this.currentItem.J.removeClass("selected");
      }
      this.currentItem = item;
      item.J.addClass("selected");
      this.UI.name.J.text(item.originData.name);
      if (item.originData.img) {
        this.UI.img.src = item.originData.img.src;
      }
      this.UI.description.J.text(item.originData.description);
      this.initTraits(item.playerItem);
      this.J.fadeIn("fast");
      return this.UI['content'].J.fadeIn(100);
    };

    ItemDetailsBox.prototype.initTraits = function(itemData) {
      var name, value, _ref, _results;
      if (!itemData.traits) {
        return;
      }
      this.UI['traits-list'].J.html("");
      _ref = itemData.traits;
      _results = [];
      for (name in _ref) {
        value = _ref[name];
        _results.push(new TraitsItem(name, value).appendTo(this.UI['traits-list']));
      }
      return _results;
    };

    return ItemDetailsBox;

  })(Widget);

}).call(this);
