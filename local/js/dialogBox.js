// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.DialogBox = (function(_super) {
    __extends(DialogBox, _super);

    function DialogBox(alwaysontop) {
      var _this = this;
      if (alwaysontop == null) {
        alwaysontop = false;
      }
      DialogBox.__super__.constructor.call(this, Res.tpls['dialog-box']);
      this.onshow = false;
      this.displayInterval = null;
      this.displayLock = false;
      if (alwaysontop) {
        this.J.addClass("top");
      }
      this.UI['content-wrapper'].onclick = function() {
        if (_this.displayLock) {
          return _this.endDisplay();
        } else {
          _this.UI['continue-hint'].J.fadeOut("fast");
          return _this.emit("next");
        }
      };
    }

    DialogBox.prototype.setCharacter = function(name, position) {
      return console.log("set character");
    };

    DialogBox.prototype.setSpeaker = function(speaker) {
      if (!speaker) {
        return;
      }
      return this.UI.speaker.J.text("" + speaker + ":");
    };

    DialogBox.prototype.endDisplay = function(nostop) {
      var text;
      window.clearInterval(this.displayInterval);
      this.displayLock = false;
      text = this.currentDisplayData.text;
      text = text.replace(/\|/g, "</br>");
      text = text.replace(/`/g, "");
      this.UI.text.innerHTML = text;
      if (nostop) {
        return this.emit("next");
      } else {
        return this.UI['continue-hint'].J.fadeIn("fast");
      }
    };

    DialogBox.prototype.display = function(data, callback) {
      var arr, currentDelay, delay, index,
        _this = this;
      console.log(data.text);
      if (!data.text || this.displayLock) {
        return;
      }
      if (!this.onshow) {
        this.show(function() {
          return _this.display(data, callback);
        });
      }
      if (data.nostop === void 0) {
        data.nostop = false;
      }
      this.setSpeaker(data.speaker);
      this.UI['continue-hint'].J.fadeOut("fast");
      if (callback) {
        this.once("next", callback);
      }
      this.displayLock = true;
      this.currentDisplayData = data;
      arr = data.text.split("");
      index = 0;
      this.UI.text.innerHTML = "";
      delay = 0;
      currentDelay = 0;
      return this.displayInterval = window.setInterval((function() {
        var c;
        if (delay && currentDelay < delay) {
          return currentDelay += 1;
        }
        delay = 0;
        currentDelay = 0;
        if (index < arr.length) {
          if (index === arr.length - 1) {
            delay = 3;
          }
          switch (arr[index]) {
            case "|":
            case "|":
              c = "</br>";
              break;
            case "`":
              c = "";
              break;
            case ",":
            case "，":
              if (index !== (arr.length - 1)) {
                delay = 3;
              }
              c = arr[index];
              break;
            case "!":
            case "！":
            case "。":
              if (index !== (arr.length - 1)) {
                delay = 3;
              }
              c = arr[index];
              break;
            default:
              c = arr[index];
          }
          _this.UI.text.innerHTML += c;
          return index += 1;
        } else {
          return _this.endDisplay(data.nostop);
        }
      }), 60);
    };

    DialogBox.prototype.show = function(callback) {
      var _this = this;
      if (this.onshow) {
        if (callback) {
          callback();
        }
        return;
      }
      this.onshow = true;
      this.J.hide();
      this.appendTo(this.UILayer.dom);
      return this.J.fadeIn("fast", function() {
        if (callback) {
          return callback();
        }
      });
    };

    DialogBox.prototype.hide = function(callback) {
      var _this = this;
      this.onshow = false;
      return this.css3Animate.call(this.UI['content-wrapper'], "animate-pophide", function() {
        try {
          _this.remove();
        } catch (_error) {}
        if (callback) {
          return callback();
        }
      });
    };

    return DialogBox;

  })(Menu);

}).call(this);
