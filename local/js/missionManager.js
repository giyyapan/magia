// Generated by CoffeeScript 1.6.2
(function() {
  var Mission,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Mission = (function(_super) {
    __extends(Mission, _super);

    function Mission(manager, name, data) {
      Mission.__super__.constructor.call(this, null);
      this.name = name;
      this.data = data;
      this.manager = manager;
      this.player = manager.game.player;
      this.dspName = data.name;
      this.status = this.getStatus();
    }

    Mission.prototype.getStatus = function() {
      var name, player;

      player = this.player;
      for (name in player.currentMissions) {
        if (name === this.name) {
          this.status = "current";
        }
      }
      for (name in player.completedMissions) {
        if (name === this.name) {
          this.status = "completed";
        }
      }
      if (this.avail) {
        this.status = "avail";
      } else {
        this.status = "disable";
      }
      return this.status;
    };

    Mission.prototype.avail = function() {
      if (this.data.after) {
        if (!this.player.completedMissions[this.data.after]) {
          return false;
        }
      }
      return true;
    };

    Mission.prototype.checkComplete = function() {};

    return Mission;

  })(EventEmitter);

  window.MissionManager = (function(_super) {
    __extends(MissionManager, _super);

    function MissionManager(game) {
      var data, name, _ref;

      MissionManager.__super__.constructor.call(this, null);
      this.game = game;
      this.player = game;
      this.missions = {};
      _ref = this.game.db.missions.getAll();
      for (name in _ref) {
        data = _ref[name];
        this.missions[name] = new Mission(this, name, data);
      }
    }

    MissionManager.prototype.startMission = function(mission) {};

    MissionManager.prototype.completeMission = function(mission) {};

    MissionManager.prototype.getMissions = function(type) {
      var m, res, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;

      res = [];
      switch (type) {
        case "all":
          res = this.missions;
          break;
        case "completed":
          _ref = this.missions;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            m = _ref[_i];
            if (m.getStatus === "completed") {
              res.push(m);
            }
          }
          break;
        case "current":
          _ref1 = this.missions;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            m = _ref1[_j];
            if (m.getStatus === "current") {
              res.push(m);
            }
          }
          break;
        case "avail":
          _ref2 = this.missions;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            m = _ref2[_k];
            if (m.getStatus === "avail") {
              res.push(m);
            }
          }
      }
      return res;
    };

    return MissionManager;

  })(EventEmitter);

}).call(this);
