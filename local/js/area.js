// Generated by CoffeeScript 1.6.3
(function() {
  var GatherResaultBox, Place,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Place = (function(_super) {
    __extends(Place, _super);

    function Place(area, db, name, data) {
      var index, item, moveTarget, p, self, _i, _j, _len, _len1, _ref, _ref1;
      this.area = area;
      this.db = db;
      this.name = name;
      this.data = data;
      Place.__super__.constructor.call(this);
      this.bg = new Layer(Res.imgs[this.data.bg]);
      this.menu = new Menu(Res.tpls['area-menu']);
      this.menu.J.addClass(this.name);
      this.menu.show();
      this.resPoints = [];
      this.drawQueueAddAfter(this.bg);
      this.initItems();
      self = this;
      _ref = this.data.resPoints;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        p = _ref[index];
        item = new Suzaku.Widget(this.menu.UI['res-point-tpl'].J.html());
        item.J.html(index);
        item.dom.number = index;
        item.J.addClass("gp" + index);
        item.appendTo(this.menu.UI['res-point-box']);
        item.dom.onclick = function() {
          return self.handleGatherResault(self.gatherItem(this.number));
        };
      }
      _ref1 = this.data.movePoints;
      for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
        moveTarget = _ref1[index];
        item = new Suzaku.Widget(this.menu.UI['move-point-tpl'].innerHTML);
        item.J.html(moveTarget);
        item.dom.target = moveTarget;
        item.J.addClass("mp-" + moveTarget);
        item.appendTo(this.menu.UI['move-point-box']);
        item.dom.onclick = function() {
          return area.enterPlace(this.target);
        };
      }
    }

    Place.prototype.initItems = function() {
      var gatherData, i, index, item, itemData, name, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.data.resPoints;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        i = _ref[index];
        this.resPoints.push([]);
      }
      _ref1 = this.db.things.items;
      for (itemData = _j = 0, _len1 = _ref1.length; _j < _len1; itemData = ++_j) {
        name = _ref1[itemData];
        if (!itemData.gather) {
          continue;
        }
        item = new GatherItem(name, itemData);
        gatherData = item.getGatherDataByPlace(this.area.name, this.name);
        if (gatherData) {
          this.resPoints[gatherData.resPoint - 1] = item;
        }
      }
      return console.log(this.resPoints);
    };

    Place.prototype.gatherItem = function(resPointNum) {
      var index, items, res;
      index = resPointNum - 1;
      items = this.resPoints[index];
      res = [];
      if (items.length === 0) {
        return "这里什么也没有";
      }
      if (item.tryGather() === true) {
        res.push(item);
      }
      return res;
    };

    Place.prototype.handleGatherResault = function(data) {
      var box;
      if (typeof data !== "string") {
        this.emit("getItem", data);
      }
      box = new GatherResaultBox(data);
      return box.show();
    };

    return Place;

  })(Layer);

  GatherResaultBox = (function(_super) {
    __extends(GatherResaultBox, _super);

    function GatherResaultBox(data) {
      GatherResaultBox.__super__.constructor.call(this);
      this.UI.title.J.text("采集结果");
      if (typeof data === "string") {
        this.UI.content.J.text(data.str);
        return;
      }
    }

    return GatherResaultBox;

  })(PopupBox);

  window.Area = (function(_super) {
    __extends(Area, _super);

    function Area(game, areaName) {
      this.game = game;
      Area.__super__.constructor.call(this, game);
      this.name = areaName;
      this.data = game.db.areas[areaName];
      this.enterPlace("entry");
    }

    Area.prototype.enterPlace = function(placeName) {
      var placeData;
      if (placeName === "exit") {
        return this.game.switchStage("worldMap");
      }
      placeData = this.data.places[placeName];
      if (!placeData) {
        console.error("no place:" + placeName);
      }
      this.currentPlace = new Place(this, this.game.db, placeName, placeData);
      this.clearDrawQueue();
      return this.drawQueueAddAfter(this.currentPlace);
    };

    return Area;

  })(Stage);

}).call(this);
