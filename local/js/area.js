// Generated by CoffeeScript 1.6.3
(function() {
  var GatherResaultBox, Place,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Place = (function(_super) {
    __extends(Place, _super);

    function Place(area, db, name, data) {
      var self;
      this.area = area;
      this.db = db;
      this.name = name;
      this.data = data;
      Place.__super__.constructor.call(this);
      this.camera = new Camera();
      this.drawQueueAddAfter(this.camera);
      this.initBg();
      this.initMenu();
      this.resPoints = [];
      this.currentX = 0;
      this.initItems();
      self = this;
    }

    Place.prototype.tick = function() {
      var s;
      s = Utils.getSize();
      if (Key.up) {
        if (Key.shift) {
          this.camera.scale += 0.03;
        }
      }
      if (Key.down) {
        if (Key.shift) {
          this.camera.scale -= 0.03;
        }
      }
      if (Key.right) {
        this.currentX += 15;
      }
      if (Key.left) {
        this.currentX -= 15;
      }
      if (this.currentX < 0) {
        this.currentX = 0;
      }
      if (this.currentX > this.bg.width - s.width) {
        this.currentX = this.bg.width - s.width;
      }
      return this.camera.x = this.camera.getOffsetPositionX(this.currentX, this.bg);
    };

    Place.prototype.initBg = function() {
      this.bg = new Layer(Res.imgs[this.data.bg[0]]);
      this.bgFloat = new Layer(Res.imgs[this.data.bg[1]]);
      this.bgFloat2 = new Layer(Res.imgs[this.data.bg[2]]);
      this.bgFloat2.fixToBottom();
      this.bgFloat2.transform.scale = 1.5;
      this.bgFloat2.x = 300;
      this.bg.z = 1000;
      this.bgFloat.z = 600;
      return this.camera.render(this.bg, this.bgFloat, this.bgFloat2);
    };

    Place.prototype.initMenu = function() {
      var index, moveCallback, moveTarget, p, s, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      s = Utils.getSize();
      this.menu = new Menu(Res.tpls['area-menu']);
      this.menu.J.addClass(this.name);
      this.menu.UI.title.J.text(this.data.name);
      moveCallback = function() {
        var x;
        x = _this.currentX;
        delete _this.camera.lock;
        if (x === 0) {
          _this.menu.UI['move-left'].J.fadeOut(200);
        } else {
          _this.menu.UI['move-left'].J.fadeIn(200);
        }
        if (x === (_this.bg.width - s.width)) {
          return _this.menu.UI['move-right'].J.fadeOut(200);
        } else {
          return _this.menu.UI['move-right'].J.fadeIn(200);
        }
      };
      this.menu.UI['move-right'].onclick = function(evt) {
        var x;
        evt.stopPropagation();
        console.log("right");
        _this.camera.lock = true;
        _this.currentX += 400;
        if (_this.currentX > _this.bg.width - s.width) {
          _this.currentX = _this.bg.width - s.width;
        }
        x = _this.camera.getOffsetPositionX(_this.currentX, _this.bg);
        if (x > _this.bg.width) {
          x = _this.bg.width;
        }
        return _this.camera.animate({
          x: x
        }, "normal", function() {
          return moveCallback();
        });
      };
      this.menu.UI['move-left'].onclick = function(evt) {
        var x;
        evt.stopPropagation();
        console.log("left");
        _this.camera.lock = true;
        _this.currentX -= 400;
        if (_this.currentX < 0) {
          _this.currentX = 0;
        }
        x = _this.camera.getOffsetPositionX(_this.currentX, _this.bg);
        return _this.camera.animate({
          x: x
        }, "normal", function() {
          return moveCallback();
        });
      };
      this.menu.UI.backpack.onclick = function(evt) {
        evt.stopPropagation();
        return _this.emit("showBackpack");
      };
      this.menu.dom.onclick = function(evt) {
        return _this.searchPosition(evt.offsetX, evt.offsetY);
      };
      this.relativeMenu = new Menu(Res.tpls['area-relative-menu']);
      this.relativeMenu.J.addClass(this.name);
      this.relativeMenu.z = 1000;
      this.relativeMenu.UI['res-point-box'].J.hide();
      _ref = this.data.resPoints;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        p = _ref[index];
        this.addResPoint(p, index);
      }
      _ref1 = this.data.movePoints;
      for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
        moveTarget = _ref1[index];
        this.addMovePoint(moveTarget, index);
      }
      this.menu.show();
      this.relativeMenu.appendTo(this.menu.UI['relative-wrapper']);
      return this.camera.render(this.relativeMenu);
    };

    Place.prototype.searchPosition = function(x, y) {
      var dx, dy, realH, realW, realX, realY, s, scale, sx, sy;
      s = Utils.getSize();
      scale = 1.5;
      return;
      if (!this.scaledIn) {
        this.menu.J.find(".autohide").addClass("invisible");
        this.scaledIn = true;
        this.lastCameraPosition = {
          x: this.camera.x,
          y: this.camera.y
        };
        realW = s.width / scale;
        realH = s.height / scale;
        sx = this.camera.getOffsetScaleX(this.bg.z);
        sy = this.camera.getOffsetScaleY(this.bg.z);
        dx = x + this.camera.x - s.width / 2;
        dy = y + this.camera.y - s.height / 2;
        realX = dx / (realW / 4) / sx;
        if (realX < -1) {
          realX = -1;
        }
        if (realX > 1) {
          realX = 1;
        }
        realX = realX * (realW / 4);
        realY = this.camera.y;
        console.log(realX, realY);
        this.camera.moveTo(realX, realY, "fast");
        this.camera.scaleTo(scale, "fast");
        return this.bgFloat.animate({
          "transform.opacity": 0
        }, "fast");
      } else {
        this.menu.J.find(".autohide").removeClass("invisible");
        this.scaledIn = false;
        this.camera.moveTo(this.lastCameraPosition.x, this.lastCameraPosition.y, "fast");
        this.camera.scaleTo(1, "fast");
        return this.bgFloat.animate({
          "transform.opacity": 1
        }, "fast");
      }
    };

    Place.prototype.addResPoint = function(p, index) {
      var item, self;
      self = this;
      item = new Suzaku.Widget(this.relativeMenu.UI['res-point-tpl'].J.html());
      item.UI.name.J.text("采集点" + (index + 1));
      item.dom.number = index + 1;
      item.J.addClass("gp" + (index + 1));
      item.appendTo(this.relativeMenu.UI['res-point-box']);
      return item.dom.onclick = function() {
        return self.handleGatherResault(self.gatherItem(this.number));
      };
    };

    Place.prototype.addMovePoint = function(moveTarget, index) {
      var area, item;
      area = this.area;
      item = new Suzaku.Widget(this.relativeMenu.UI['move-point-tpl'].innerHTML);
      item.UI.target.J.text(moveTarget);
      item.dom.target = moveTarget;
      item.J.addClass("mp-" + moveTarget);
      item.appendTo(this.relativeMenu.UI['move-point-box']);
      return item.dom.onclick = function() {
        return area.enterPlace(this.target);
      };
    };

    Place.prototype.initItems = function() {
      var gatherData, i, index, item, itemData, name, _i, _len, _ref, _ref1;
      _ref = this.data.resPoints;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        i = _ref[index];
        this.resPoints.push([]);
      }
      _ref1 = this.db.things.items;
      for (name in _ref1) {
        itemData = _ref1[name];
        if (!itemData.gather) {
          continue;
        }
        item = new GatherItem(name, itemData);
        gatherData = item.getGatherDataByPlace(this.area.name, this.name);
        if (gatherData) {
          this.resPoints[gatherData.resPoint - 1].push(item);
        }
      }
      return console.log(this.resPoints);
    };

    Place.prototype.gatherItem = function(resPointNum) {
      var gatherNumber, index, item, items, res, _i, _len;
      index = resPointNum - 1;
      items = this.resPoints[index];
      res = [];
      if (items.length === 0) {
        return null;
      }
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        gatherNumber = item.tryGather();
        if (gatherNumber) {
          res.push({
            gatherItem: item,
            number: gatherNumber
          });
        }
      }
      return res;
    };

    Place.prototype.handleGatherResault = function(data) {
      var box;
      if (typeof data !== "string") {
        return this.emit("getItem", data);
      } else {
        box = new GatherResaultBox("什么也没有采集到");
        return box.show();
      }
    };

    return Place;

  })(Layer);

  GatherResaultBox = (function(_super) {
    __extends(GatherResaultBox, _super);

    function GatherResaultBox(data) {
      var itemResData, number, originData, w, _i, _len;
      GatherResaultBox.__super__.constructor.call(this);
      this.UI.title.J.text("采集结果");
      if (typeof data === "string") {
        this.UI.content.J.text(data);
      } else {
        this.UI.content.J.hide();
        this.UI['content-list'].J.show();
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          itemResData = data[_i];
          originData = itemResData.gatherItem.originData;
          number = itemResData.number;
          console.log(itemResData);
          w = new ThingListWidget(originData, number);
          w.appendTo(this.UI['content-list']);
        }
      }
    }

    return GatherResaultBox;

  })(PopupBox);

  window.Area = (function(_super) {
    __extends(Area, _super);

    function Area(game, areaName) {
      Area.__super__.constructor.call(this, game);
      this.game = game;
      this.name = areaName;
      this.data = game.db.areas[areaName];
      this.backpackMenu = new Backpack(game, "gatherArea");
      this.enterPlace("entry");
    }

    Area.prototype.enterPlace = function(placeName) {
      var placeData,
        _this = this;
      if (placeName === "exit") {
        return this.game.switchStage("worldMap");
      }
      placeData = this.data.places[placeName];
      if (!placeData) {
        console.error("no place:" + placeName);
      }
      this.currentPlace = new Place(this, this.game.db, placeName, placeData);
      this.clearDrawQueue();
      this.drawQueueAddAfter(this.currentPlace);
      this.currentPlace.on("getItem", function(itemDataArr) {
        return _this.getItem(itemDataArr);
      });
      return this.currentPlace.on("showBackpack", function() {
        return _this.showBackpack();
      });
    };

    Area.prototype.showBackpack = function() {
      var self;
      console.log("show backpack");
      console.log(this.backpackMenu);
      self = this;
      this.backpackMenu.on("close", function() {
        self.currentPlace.onShow = true;
        return self.backpackMenu.hide(function() {
          return self.currentPlace.menu.show();
        });
      });
      return this.backpackMenu.show(function() {
        return self.currentPlace.onShow = false;
      });
    };

    Area.prototype.getItem = function(itemDataArr) {
      var box, data, name, number, originData, _i, _len;
      if (!this.game.player.checkFreeSpace("backpack", itemDataArr)) {
        return;
      }
      for (_i = 0, _len = itemDataArr.length; _i < _len; _i++) {
        data = itemDataArr[_i];
        name = data.gatherItem.name;
        originData = data.gatherItem.originData;
        number = data.number;
        this.game.player.getItem("backpack", {
          name: name,
          originData: originData,
          number: number
        });
      }
      box = new GatherResaultBox(itemDataArr);
      return box.show();
    };

    Area.prototype.tick = function() {
      if (this.currentPlace.tick) {
        return this.currentPlace.tick();
      }
    };

    return Area;

  })(Stage);

}).call(this);
