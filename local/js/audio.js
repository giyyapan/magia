// Generated by CoffeeScript 1.6.3
(function() {
  var GameAudio, GameAudioManager,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GameAudioManager = (function(_super) {
    __extends(GameAudioManager, _super);

    function GameAudioManager() {
      var name, path, resourceContainerDom, _ref, _ref1;
      GameAudioManager.__super__.constructor.apply(this, arguments);
      this.nosound = false;
      this.source = {
        sfxStartCusor: "sfxStartCusor",
        startClick: "startClick",
        playerCast: "player-cast",
        hurt: "hurt",
        slimeHit: "hit-slime",
        pigHit: "hit-pig",
        qqHit: "hit-qq"
      };
      this.bgmSource = {
        startMenu: "startMenu",
        home: "home",
        battleBgm: "battleBgm"
      };
      this.audios = {};
      resourceContainerDom = document.getElementById("resourceContainer");
      _ref = this.source;
      for (name in _ref) {
        path = _ref[name];
        this.audios[name] = new GameAudio(name, path, resourceContainerDom, false);
      }
      _ref1 = this.bgmSource;
      for (name in _ref1) {
        path = _ref1[name];
        this.audios[name] = new GameAudio(name, path, resourceContainer, true);
      }
    }

    GameAudioManager.prototype.play = function(audioName) {
      var a, audio, name, _ref;
      if (GameConfig.noSound) {
        return true;
      }
      if (this.nosound) {
        return;
      }
      a = this.audios[audioName];
      if (!a) {
        return console.error("not found audio", audioName);
      }
      if (a.isBGM) {
        _ref = this.audios;
        for (name in _ref) {
          audio = _ref[name];
          if (audio.isBGM) {
            audio.stop();
          }
        }
      }
      return a.play();
    };

    GameAudioManager.prototype.soundOff = function() {
      this.setSound("all", 0);
      return this.nosound = true;
    };

    GameAudioManager.prototype.soundOn = function() {
      this.setSound("all", 1);
      return this.nosound = false;
    };

    GameAudioManager.prototype.setSound = function(soundName, volume) {
      var audio, _results;
      if (soundName === "all") {
        _results = [];
        for (audio in this.audios) {
          _results.push(this.audios[audio].setVolume(volume));
        }
        return _results;
      } else {
        if (this.audios[soundName]) {
          return this.audios[soundName].setVolume(volume);
        }
      }
    };

    GameAudioManager.prototype.pause = function(audioName) {
      if (this.audios[audioName]) {
        return this.audios[audioName].pause();
      } else {
        return console.error("pause-audio" + audioName + "not found ");
      }
    };

    GameAudioManager.prototype.stop = function(audioName) {
      if (this.audios[audioName]) {
        return this.audios[audioName].stop();
      } else {
        return console.error("stop-audio" + audioName + "not found ");
      }
    };

    GameAudioManager.prototype.mute = function() {
      var audio, _results;
      _results = [];
      for (audio in this.audios) {
        _results.push(this.audios[audio].stop());
      }
      return _results;
    };

    return GameAudioManager;

  })(EventEmitter);

  GameAudio = (function(_super) {
    __extends(GameAudio, _super);

    function GameAudio(name, sourceName, container, isBGM) {
      this.name = name;
      this.sourceName = sourceName;
      this.container = container;
      this.isBGM = isBGM;
      GameAudio.__super__.constructor.apply(this, arguments);
      this.pathName = "/audio/";
      this.doms = [];
      if (this.isBGM) {
        this.stoped = false;
        this.play = this.bgmPlay;
      } else {
        this.play = this.soundPlay;
      }
      this.addAudioDom();
    }

    GameAudio.prototype.addAudioDom = function() {
      var newAudioDom, oggSource;
      newAudioDom = document.createElement("audio");
      newAudioDom.id = this.name + (this.doms.length + 1);
      newAudioDom.preload = "preload";
      if (this.isBGM) {
        newAudioDom.loop = "loop";
      }
      this.container.appendChild(newAudioDom);
      this.doms.push(newAudioDom);
      oggSource = document.createElement("source");
      oggSource.id = newAudioDom.id + "ogg";
      oggSource.src = this.pathName + this.sourceName + ".ogg";
      newAudioDom.appendChild(oggSource);
      return newAudioDom;
    };

    GameAudio.prototype.soundPlay = function() {
      var soundDom, _i, _len, _ref;
      _ref = this.doms;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        soundDom = _ref[_i];
        if (soundDom.paused) {
          try {
            soundDom.currentTime = 0;
          } catch (_error) {}
          soundDom.play();
          return true;
        }
      }
      this.addAudioDom().play();
      return false;
    };

    GameAudio.prototype.bgmPlay = function() {
      var dom, dv, s;
      dom = this.doms[0];
      dom.play();
      dom.paused = false;
      dom.volume = 0;
      dv = 0.05;
      return s = window.setInterval((function() {
        var v;
        v = dom.volume;
        if (v + dv >= 1) {
          return window.clearInterval(s);
        } else {
          return dom.volume += dv;
        }
      }), 5);
    };

    GameAudio.prototype.setVolume = function(volume) {
      var soundDom, _i, _len, _ref, _results;
      _ref = this.doms;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        soundDom = _ref[_i];
        _results.push(soundDom.volume = volume);
      }
      return _results;
    };

    GameAudio.prototype.stop = function() {
      var soundDom, _i, _len, _ref, _results;
      _ref = this.doms;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        soundDom = _ref[_i];
        soundDom.pause();
        try {
          _results.push(soundDom.currentTime = 0);
        } catch (_error) {}
      }
      return _results;
    };

    GameAudio.prototype.pause = function() {
      var soundDom, _i, _len, _ref, _results;
      _ref = this.doms;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        soundDom = _ref[_i];
        _results.push(soundDom.pause());
      }
      return _results;
    };

    return GameAudio;

  })(EventEmitter);

  window.AudioManager = new GameAudioManager();

}).call(this);
