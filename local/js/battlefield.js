// Generated by CoffeeScript 1.6.3
(function() {
  var BattlefieldMenu, Buff, Debuff, DetailsBox, Dot, SpellSourceItem,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.BattlefieldAffect = (function(_super) {
    __extends(BattlefieldAffect, _super);

    function BattlefieldAffect(x, y) {
      BattlefieldAffect.__super__.constructor.call(this, x, y);
    }

    BattlefieldAffect.prototype.draw = function(context) {
      context.fillStyle = "rgba(255,255,255,0.5)";
      context.beginPath();
      context.arc(0, 0, 25, 0, Math.PI * 2, true);
      context.closePath();
      return context.fill();
    };

    return BattlefieldAffect;

  })(Drawable);

  Buff = (function(_super) {
    __extends(Buff, _super);

    function Buff(data) {
      Buff.__super__.constructor.call(this, null);
    }

    Buff.prototype.handleAttackDamage = function(damage) {};

    Buff.prototype.handleOnAttacakDamage = function(damage) {};

    return Buff;

  })(EventEmitter);

  Debuff = (function(_super) {
    __extends(Debuff, _super);

    function Debuff(data) {
      Debuff.__super__.constructor.call(this, null);
    }

    Debuff.prototype.handleAttackDamage = function(damage) {};

    Debuff.prototype.handleOnAttacakDamage = function(damage) {};

    return Debuff;

  })(EventEmitter);

  Dot = (function(_super) {
    __extends(Dot, _super);

    function Dot(data) {
      Dot.__super__.constructor.call(this, null);
    }

    Dot.prototype.handleAttackDamage = function(damage) {};

    Dot.prototype.handleOnAttacakDamage = function(damage) {};

    return Dot;

  })(EventEmitter);

  window.BattlefieldSprite = (function(_super) {
    __extends(BattlefieldSprite, _super);

    function BattlefieldSprite(x, y, spriteData) {
      BattlefieldSprite.__super__.constructor.apply(this, arguments);
      this.icon = spriteData.icon;
      this.buffs = {};
      this.debuffs = {};
      this.dots = {};
      this.dead = false;
    }

    BattlefieldSprite.prototype.handleAttackDamage = function(damage) {
      var buff, debuff, name, _ref, _ref1;
      _ref = this.buffs;
      for (name in _ref) {
        buff = _ref[name];
        buff.handleAttackDamage(damage);
      }
      _ref1 = this.debuffs;
      for (name in _ref1) {
        debuff = _ref1[name];
        debuff.handleAttackDamage(damage);
      }
      return damage;
    };

    BattlefieldSprite.prototype.handleOnAttacakDamage = function(damage) {
      var buff, debuff, name, _ref, _ref1;
      _ref = this.buffs;
      for (name in _ref) {
        buff = _ref[name];
        buff.handleAttackDamage(damage);
      }
      _ref1 = this.debuffs;
      for (name in _ref1) {
        debuff = _ref1[name];
        debuff.handleAttackDamage(damage);
      }
      return damage;
    };

    BattlefieldSprite.prototype.addStatus = function(type, data) {
      switch (type) {
        case "buff":
          break;
        case "debuff":
          break;
        case "dot":
      }
      return status;
    };

    BattlefieldSprite.prototype.clearStatus = function(status) {
      return true;
    };

    BattlefieldSprite.prototype.draw = function(context) {
      return BattlefieldSprite.__super__.draw.apply(this, arguments);
    };

    BattlefieldSprite.prototype.tick = function(tickDelay) {
      if (!this.bf.paused && !this.dead) {
        return this.speedItem.tick(tickDelay);
      }
    };

    return BattlefieldSprite;

  })(Sprite);

  window.SpeedItem = (function(_super) {
    __extends(SpeedItem, _super);

    function SpeedItem(tpl, data) {
      SpeedItem.__super__.constructor.call(this, tpl);
      this.speedGage = 80;
      this.maxSpeed = 100;
      this.speed = data.statusValue.spd;
      console.log(data);
      if (data.icon) {
        this.UI.icon.src = data.icon.src;
      }
    }

    SpeedItem.prototype.tick = function(tickDelay) {
      this.speedGage += tickDelay / 1000 * this.speed;
      if (this.speedGage > this.maxSpeed) {
        this.setWidgetPosition(this.maxSpeed);
        this.speedGage -= this.maxSpeed;
        return this.emit("active");
      } else {
        return this.setWidgetPosition(this.speedGage);
      }
    };

    SpeedItem.prototype.setWidgetPosition = function(value) {
      return this.J.css("left", parseInt(value / this.maxSpeed * 100) + "%");
    };

    return SpeedItem;

  })(Widget);

  SpellSourceItem = (function(_super) {
    __extends(SpellSourceItem, _super);

    function SpellSourceItem(tpl, type, menu, playerSupplies) {
      var _this = this;
      SpellSourceItem.__super__.constructor.call(this, tpl);
      this.type = type;
      this.playerSupplies = playerSupplies;
      this.originData = playerSupplies.originData;
      this.effectData = this.originData[type];
      this.traitValue = playerSupplies.traitValue;
      this.UI.img.src = playerSupplies.img.src;
      this.UI.name.J.text(this.originData.name);
      this.dom.onclick = function(evt) {
        return menu.detailsBox.showItemDetails(_this);
      };
    }

    return SpellSourceItem;

  })(Widget);

  DetailsBox = (function(_super) {
    __extends(DetailsBox, _super);

    function DetailsBox(bf) {
      var _this = this;
      DetailsBox.__super__.constructor.apply(this, arguments);
      this.bf = bf;
      this.UI['cancel-btn'].onclick = function() {
        _this.bf.menu.UI['spell-source-box'].J.find("li").removeClass("selected");
        return _this.J.fadeOut(100);
      };
    }

    DetailsBox.prototype.showItemDetails = function(item) {
      var t,
        _this = this;
      DetailsBox.__super__.showItemDetails.call(this, item);
      switch (item.type) {
        case "active":
          t = "激活效果:";
          break;
        case "defense":
          t = "结界效果:";
      }
      this.UI['rune-type'].J.text(t);
      this.UI.description.J.text(item.effectData.description);
      return this.UI['use-btn'].onclick = function() {
        return _this.useItem(item);
      };
    };

    DetailsBox.prototype.useItem = function(sourceItemWidget) {
      var menu,
        _this = this;
      menu = this.bf.menu;
      menu.UI['magic-menus'].J.fadeOut(150);
      if (sourceItemWidget.type === "active") {
        switch (sourceItemWidget.effectData.type) {
          case "attack" || "debuff":
            menu.hideActionBtns();
            return menu.showTargetSelect("magic", {
              cancel: function() {
                menu.showActionBtns();
                return menu.UI['magic-menus'].J.fadeIn(150);
              },
              success: function(target) {
                return _this.bf.player.castSpell(sourceItemWidget, target);
              }
            });
          case "areaAttack":
            return this.bf.player.castSpell(sourceItemWidget, this.bf.monsters);
          case "buff":
          case "heal":
            return this.bf.player.castSpell(sourceItemWidget, this.bf.player);
          default:
            return console.error("invailid item active type" + sourceItemWidget.effectData.type);
        }
      } else {
        return this.bf.player.castSpell(sourceItemWidget, this.bf.player);
      }
    };

    return DetailsBox;

  })(ItemDetailsBox);

  BattlefieldMenu = (function(_super) {
    __extends(BattlefieldMenu, _super);

    function BattlefieldMenu(battlefield, tpl) {
      BattlefieldMenu.__super__.constructor.call(this, tpl);
      this.bf = battlefield;
      this.detailsBox = new DetailsBox(this.bf);
      this.detailsBox.appendTo(this.UI['item-details-box-wrapper']);
      this.initBtns();
    }

    BattlefieldMenu.prototype.initBtns = function() {
      var stopPropagation,
        _this = this;
      this.UI['attack-btn'].onclick = function(evt) {
        return _this.handlePlayerAttack();
      };
      this.UI['defense-btn'].onclick = function(evt) {
        return _this.handlePlayerDefense();
      };
      this.UI['magic-btn'].onclick = function(evt) {
        return _this.handlePlayerMagic();
      };
      this.UI['escape-btn'].onclick = function(evt) {
        return _this.handlePlayerEscape();
      };
      this.UI['active-rune'].onclick = function(evt) {
        _this.UI['active-rune'].J.addClass("selected");
        return _this.showSpellSourceLayer("active");
      };
      this.UI['defense-rune'].onclick = function(evt) {
        _this.UI['defense-rune'].J.addClass("selected");
        return _this.showSpellSourceLayer("defense");
      };
      stopPropagation = function(evt) {
        return evt.stopPropagation();
      };
      this.UI['spell-select-box'].onclick = stopPropagation;
      this.UI['spell-source-box'].onclick = stopPropagation;
      return this.detailsBox.onclick = stopPropagation;
    };

    BattlefieldMenu.prototype.addSpeedItem = function(originData) {
      var item, tpl;
      tpl = this.UI['speed-item-tpl'].innerHTML;
      item = new SpeedItem(tpl, originData);
      item.appendTo(this.UI['speed-item-list']);
      return item;
    };

    BattlefieldMenu.prototype.showActionBtns = function(callback) {
      this.UI['action-btns'].J.addClass("show");
      this.UI['status-box'].J.addClass("show");
      if (callback) {
        return callback();
      }
    };

    BattlefieldMenu.prototype.hideActionBtns = function(callback) {
      this.UI['action-btns'].J.removeClass("show");
      this.UI['status-box'].J.removeClass("show");
      if (callback) {
        return callback();
      }
    };

    BattlefieldMenu.prototype.handlePlayerAttack = function() {
      var _this = this;
      console.log("attack clicked");
      this.hideActionBtns();
      this.bf.setView("default");
      return this.showTargetSelect("attack", {
        success: function(target) {
          return _this.bf.player.attack(target);
        },
        cancel: function(target) {
          return _this.bf.player.act();
        }
      });
    };

    BattlefieldMenu.prototype.showTargetSelect = function(type, callbacks) {
      var item, self, target, tpl, _i, _len, _ref, _results,
        _this = this;
      this.bf.setView("default");
      this.UI['target-select-box'].J.html('');
      this.UI['target-select-layer'].J.fadeIn(150);
      this.UI['target-select-layer'].onclick = function() {
        _this.UI['target-select-layer'].J.fadeOut(150);
        if (callbacks.cancel) {
          return callbacks.cancel();
        }
      };
      switch (type) {
        case "attack":
          tpl = this.UI['attack-target-btn-tpl'].innerHTML;
          break;
        case "magic":
          tpl = this.UI['magic-target-btn-tpl'].innerHTML;
      }
      self = this;
      _ref = this.bf.monsters;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        target = _ref[_i];
        item = new Widget(tpl);
        item.dom.target = target;
        item.J.css({
          top: "" + (target.y - 100) + "px",
          left: "" + (target.x - 200) + "px"
        });
        item.dom.onclick = function(evt) {
          evt.stopPropagation();
          self.UI['target-select-layer'].J.fadeOut(150);
          return callbacks.success(this.target);
        };
        _results.push(item.appendTo(this.UI['target-select-box']));
      }
      return _results;
    };

    BattlefieldMenu.prototype.handlePlayerDefense = function() {
      console.log("defense clicked");
      this.hideActionBtns();
      this.bf.setView("default");
      return this.bf.player.defense();
    };

    BattlefieldMenu.prototype.handlePlayerMagic = function() {
      var _this = this;
      this.UI['spell-source-layer'].J.hide();
      this.detailsBox.J.hide();
      this.UI['spell-select-layer'].J.hide();
      this.UI['spell-select-layer'].J.find("li").removeClass("selected");
      this.UI['magic-menus'].J.show();
      this.UI['spell-select-layer'].J.fadeIn(150);
      return this.UI['spell-select-layer'].dom.onclick = function() {
        return _this.UI['spell-select-layer'].J.fadeOut(150);
      };
    };

    BattlefieldMenu.prototype.handlePlayerEscape = function() {
      console.log("escape");
      if (this.bf.data.story) {
        new MsgBox("提示", "剧情战斗不能逃走！请直面人生吧～");
        return;
      }
      return this.bf.lose();
    };

    BattlefieldMenu.prototype.showSpellSourceLayer = function(type) {
      var i, item, self, tpl, _i, _len, _ref,
        _this = this;
      switch (type) {
        case "active":
          this.UI["spell-source-type"].innerHTML = "激活符文";
          break;
        case "defense":
          this.UI["spell-source-type"].innerHTML = "结界符文";
          break;
        default:
          return console.error("invailid type:" + type);
      }
      self = this;
      tpl = this.UI['item-tpl'].innerHTML;
      this.UI['spell-source-list'].J.html("");
      _ref = this.bf.player.playerData.backpack;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (!i.originData[type]) {
          continue;
        }
        item = new SpellSourceItem(tpl, type, this, i);
        item.appendTo(this.UI['spell-source-list']);
      }
      this.UI['spell-source-layer'].J.fadeIn(150);
      return this.UI['spell-source-layer'].dom.onclick = function() {
        _this.UI['spell-select-box'].J.find("li").removeClass("selected");
        return _this.UI['spell-source-layer'].J.fadeOut(150);
      };
    };

    return BattlefieldMenu;

  })(Menu);

  window.Battlefield = (function(_super) {
    __extends(Battlefield, _super);

    function Battlefield(game, data) {
      Battlefield.__super__.constructor.call(this, game);
      this.game = game;
      this.data = data;
      this.db = game.db;
      this.camera = new Camera();
      this.drawQueueAddAfter(this.camera);
      this.paused = false;
      this.initLayers();
      this.initSprites();
      this.setView("default");
    }

    Battlefield.prototype.initSprites = function() {
      var baseY, dx, dy, index, monster, name, s, startX, startY, x, y, _i, _len, _ref, _results;
      s = Utils.getSize();
      baseY = parseInt(s.height / 2 + 30);
      this.player = new BattlefieldPlayer(this, 150, baseY, this.game.player);
      this.mainLayer.drawQueueAddAfter(this.player);
      this.monsters = [];
      startX = 1000;
      dx = 50;
      dy = 100;
      startY = parseInt(baseY - (this.data.monsters.length - 1) * (dy * 0.5));
      _ref = this.data.monsters;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        name = _ref[index];
        x = startX + index * dx;
        y = startY + index * dy;
        monster = new BattlefieldMonster(this, x, y, name);
        monster.z = index;
        this.monsters.push(monster);
        _results.push(this.mainLayer.drawQueueAddAfter(monster));
      }
      return _results;
    };

    Battlefield.prototype.initLayers = function() {
      var bg, detail, img, imgName, name, value, _ref;
      this.bgs = [];
      this.mainLayer = null;
      _ref = this.data.bg;
      for (imgName in _ref) {
        detail = _ref[imgName];
        img = Res.imgs[imgName];
        bg = new Layer().setImg(img);
        for (name in detail) {
          value = detail[name];
          switch (name) {
            case "main":
              this.mainLayer = bg;
              break;
            case "fixToBottom":
              bg.fixToBottom();
              break;
            case "anchor":
              bg.setAnchor(value);
              break;
            default:
              bg[name] = value;
          }
        }
        this.camera.render(bg);
        console.log("fuck", bg);
        this.bgs.push(bg);
      }
      console.log(this.bgs);
      if (!this.mainLayer) {
        this.mainLayer = this.bgs[0];
      }
      this.camera.defaultReferenceZ = this.mainLayer.z;
      this.menu = new BattlefieldMenu(this, Res.tpls['battlefield-menu']);
      return this.drawQueueAddAfter(this.menu);
    };

    Battlefield.prototype.win = function() {
      var box, monsters,
        _this = this;
      this.paused = true;
      monsters = [];
      box = new MsgBox("胜利", "战斗胜利！");
      box.on("close", function() {
        return _this.emit("win", {
          monsters: _this.data.monsters
        });
      });
      return console.log("win!!!");
    };

    Battlefield.prototype.lose = function() {
      var box, evt,
        _this = this;
      this.paused = true;
      evt = {};
      this.emit("lose", evt);
      if (!evt.handled) {
        box = new MsgBox("战斗失败", "战斗失败，自动返回家里");
        return box.on("close", function() {
          return _this.game.switchStage("home");
        });
      }
    };

    Battlefield.prototype.show = function() {
      var _this = this;
      return Battlefield.__super__.show.call(this, function() {
        return _this.menu.show();
      });
    };

    Battlefield.prototype.tick = function(tickDelay) {
      var monster, _i, _len, _ref, _results;
      this.player.tick(tickDelay);
      _ref = this.monsters;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        monster = _ref[_i];
        _results.push(monster.tick(tickDelay));
      }
      return _results;
    };

    Battlefield.prototype.setView = function(name, callback) {
      switch (name) {
        case "default":
        case "normal":
          return this.camera.animate({
            x: 0,
            y: 0,
            scale: 1
          }, 200, callback);
      }
    };

    return Battlefield;

  })(Stage);

}).call(this);
