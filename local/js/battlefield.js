// Generated by CoffeeScript 1.6.3
(function() {
  var BattlefieldMenu, BattlefieldMonster, BattlefieldPlayer, SpeedItem,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SpeedItem = (function(_super) {
    __extends(SpeedItem, _super);

    function SpeedItem(tpl, originData) {
      SpeedItem.__super__.constructor.call(this, tpl);
      this.speedGage = 80;
      this.maxSpeed = 100;
      this.hp = 300;
      this.speed = originData.basicData.spd;
    }

    SpeedItem.prototype.tick = function(tickDelay) {
      this.speedGage += tickDelay / 1000 * this.speed;
      if (this.speedGage > this.maxSpeed) {
        this.setWidgetPosition(this.maxSpeed);
        this.speedGage -= this.maxSpeed;
        return this.emit("active");
      } else {
        return this.setWidgetPosition(this.speedGage);
      }
    };

    SpeedItem.prototype.setWidgetPosition = function(value) {
      return this.J.css("left", parseInt(value / this.maxSpeed * 100) + "%");
    };

    return SpeedItem;

  })(Suzaku.Widget);

  BattlefieldPlayer = (function(_super) {
    __extends(BattlefieldPlayer, _super);

    function BattlefieldPlayer(battlefield, x, y, originData) {
      var name, value, _ref,
        _this = this;
      BattlefieldPlayer.__super__.constructor.call(this, x, y, originData);
      this.basicData = originData.basicData;
      _ref = originData.basicData;
      for (name in _ref) {
        value = _ref[name];
        this[name] = value;
      }
      this.bf = battlefield;
      this.transform.scaleX = -1;
      this.lifeBar = new Widget(this.bf.menu.UI['life-bar']);
      this.speedItem = battlefield.menu.addSpeedItem(originData);
      this.speedItem.on("active", function() {
        return _this.act();
      });
    }

    BattlefieldPlayer.prototype.act = function() {
      var _this = this;
      this.bf.isPaused = true;
      return this.bf.camera.lookAt(this, this.bf.mainLayer.z, 180, function() {
        return _this.bf.menu.playerAct();
      });
    };

    BattlefieldPlayer.prototype.tick = function(tickDelay) {
      if (!this.bf.isPaused) {
        return this.speedItem.tick(tickDelay);
      }
    };

    BattlefieldPlayer.prototype.attack = function(target) {
      var damage, defaultPos,
        _this = this;
      this.bf.isPaused = true;
      this.bf.camera.follow(this, this.bf.mainLayer.z);
      damage = this.originData.skills.attack.damage;
      defaultPos = {
        x: this.x,
        y: this.y
      };
      this.useMovement("move", true);
      this.animateClock.setRate("fast");
      return this.animate({
        x: target.x - 150,
        y: target.y
      }, 800, function() {
        var listener;
        _this.animateClock.setRate("normal");
        _this.useMovement("attack");
        listener = _this.on("keyFrame", function(index, length) {
          var name, realDamage, value;
          realDamage = {};
          for (name in damage) {
            value = damage[name];
            realDamage[name] = value / length;
          }
          return target.onAttack(_this, realDamage);
        });
        return _this.once("endMove:attack", function() {
          _this.off("keyFrame", listener);
          _this.transform.scaleX = 1;
          _this.animateClock.setRate("fast");
          _this.useMovement("move", true);
          return _this.animate({
            x: defaultPos.x,
            y: defaultPos.y
          }, 800, function() {
            _this.animateClock.setRate("normal");
            _this.transform.scaleX = -1;
            _this.useMovement(_this.defaultMovement, true);
            _this.bf.camera.unfollow();
            _this.bf.setView("default");
            return _this.bf.isPaused = false;
          });
        });
      });
    };

    BattlefieldPlayer.prototype.defense = function() {};

    BattlefieldPlayer.prototype.castSpell = function() {};

    BattlefieldPlayer.prototype.onAttack = function(from, damage) {
      var type, value;
      this.bf.camera.shake("fast");
      for (type in damage) {
        value = damage[type];
        this.hp -= value;
      }
      this.lifeBar.UI['life-inner'].J.css("width", "" + (parseInt(this.hp)) + "%");
      return this.lifeBar.UI['life-text'].J.text("" + (parseInt(this.hp)) + "/" + this.basicData.hp);
    };

    BattlefieldPlayer.prototype.draw = function(context, tickDelay) {
      BattlefieldPlayer.__super__.draw.call(this, context, tickDelay);
      return context.fillRect(-10, -10, 20, 20);
    };

    return BattlefieldPlayer;

  })(Sprite);

  BattlefieldMonster = (function(_super) {
    __extends(BattlefieldMonster, _super);

    function BattlefieldMonster(battlefield, x, y, originData) {
      var name, value, _ref,
        _this = this;
      BattlefieldMonster.__super__.constructor.call(this, x, y, originData);
      this.basicData = originData.basicData;
      _ref = originData.basicData;
      for (name in _ref) {
        value = _ref[name];
        this[name] = value;
      }
      this.bf = battlefield;
      this.speedItem = battlefield.menu.addSpeedItem(originData);
      this.speedItem.on("active", function() {
        return _this.attack(_this.bf.player);
      });
    }

    BattlefieldMonster.prototype.tick = function(tickDelay) {
      if (!this.bf.isPaused) {
        return this.speedItem.tick(tickDelay);
      }
    };

    BattlefieldMonster.prototype.attack = function(target) {
      var damage, defaultPos,
        _this = this;
      this.bf.isPaused = true;
      damage = this.originData.skills.attack.damage;
      defaultPos = {
        x: this.x,
        y: this.y
      };
      this.useMovement("move", true);
      this.animateClock.setRate("fast");
      return this.animate({
        x: target.x + 150,
        y: target.y
      }, 800, function() {
        var listener;
        _this.animateClock.setRate("normal");
        _this.useMovement("attack");
        listener = _this.on("keyFrame", function(index, length) {
          var name, realDamage, value;
          realDamage = {};
          for (name in damage) {
            value = damage[name];
            realDamage[name] = value / length;
          }
          return target.onAttack(_this, realDamage);
        });
        return _this.once("endMove:attack", function() {
          _this.off("keyFrame", listener);
          _this.transform.scaleX = -1;
          _this.animateClock.setRate("fast");
          _this.useMovement("move", true);
          return _this.animate({
            x: defaultPos.x,
            y: defaultPos.y
          }, 800, function() {
            _this.animateClock.setRate("normal");
            _this.transform.scaleX = 1;
            _this.useMovement(_this.defaultMovement, true);
            return _this.bf.isPaused = false;
          });
        });
      });
    };

    BattlefieldMonster.prototype.onAttack = function(from, target) {};

    BattlefieldMonster.prototype.draw = function(context, tickDelay) {
      BattlefieldMonster.__super__.draw.call(this, context, tickDelay);
      return context.fillRect(-10, -10, 20, 20);
    };

    return BattlefieldMonster;

  })(Sprite);

  BattlefieldMenu = (function(_super) {
    __extends(BattlefieldMenu, _super);

    function BattlefieldMenu(battlefield, tpl) {
      BattlefieldMenu.__super__.constructor.call(this, tpl);
      this.bf = battlefield;
      this.initBtns();
    }

    BattlefieldMenu.prototype.initBtns = function() {
      var _this = this;
      this.UI['attack-btn'].onclick = function(evt) {
        evt.stopPropagation();
        return _this.handlePlayerAttack();
      };
      this.UI['defense-btn'].onclick = function(evt) {
        evt.stopPropagation();
        return _this.handlePlayerDefense();
      };
      this.UI['magic-btn'].onclick = function(evt) {
        evt.stopPropagation();
        return _this.handlePlayerMagic();
      };
      return this.UI['escape-btn'].onclick = function(evt) {
        evt.stopPropagation();
        return _this.handlePlayerEscape();
      };
    };

    BattlefieldMenu.prototype.addSpeedItem = function(originData) {
      var item, tpl;
      tpl = this.UI['speed-item-tpl'].innerHTML;
      item = new SpeedItem(tpl, originData);
      item.appendTo(this.UI['speed-item-list']);
      return item;
    };

    BattlefieldMenu.prototype.playerAct = function(callback) {
      return this.UI['action-box'].J.fadeIn("fast", callback);
    };

    BattlefieldMenu.prototype.hideActionBox = function(callback) {
      return this.UI['action-box'].J.fadeOut("fast", callback);
    };

    BattlefieldMenu.prototype.handlePlayerAttack = function() {
      console.log("attack clicked");
      this.hideActionBox();
      return this.bf.player.attack(this.bf.monsters[0]);
    };

    BattlefieldMenu.prototype.handlePlayerDefense = function() {
      return console.log("defense clicked");
    };

    BattlefieldMenu.prototype.handlePlayerMagic = function() {
      return console.log("magic clicked");
    };

    BattlefieldMenu.prototype.handlePlayerEscape = function() {
      return console.log("escape clicked");
    };

    return BattlefieldMenu;

  })(Menu);

  window.Battlefield = (function(_super) {
    __extends(Battlefield, _super);

    function Battlefield(game, data) {
      Battlefield.__super__.constructor.call(this, game);
      this.game = game;
      this.data = data;
      this.db = game.db;
      this.camera = new Camera();
      this.drawQueueAddAfter(this.camera);
      this.isPaused = false;
      this.initLayers();
      this.initSprites();
      this.setView("default");
    }

    Battlefield.prototype.initSprites = function() {
      var baseY, dx, dy, index, mdata, monster, name, s, startX, startY, x, y, _i, _len, _ref, _results;
      s = Utils.getSize();
      baseY = parseInt(s.height / 2 + 30);
      this.player = new BattlefieldPlayer(this, 300, baseY, this.db.monsters.get("qq"));
      this.mainLayer.drawQueueAddAfter(this.player);
      this.monsters = [];
      startX = 1000;
      dx = 50;
      dy = 100;
      startY = parseInt(baseY - (this.data.monsters.length - 1) * (dy * 0.5));
      _ref = this.data.monsters;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        name = _ref[index];
        x = startX + index * dx;
        y = startY + index * dy;
        mdata = this.db.monsters.get(name);
        monster = new BattlefieldMonster(this, x, y, mdata);
        this.monsters.push(monster);
        _results.push(this.mainLayer.drawQueueAddAfter(monster));
      }
      return _results;
    };

    Battlefield.prototype.initLayers = function() {
      var bg, detail, img, imgName, name, value, _ref;
      this.bgs = [];
      this.mainLayer = null;
      _ref = this.data.bg;
      for (imgName in _ref) {
        detail = _ref[imgName];
        img = Res.imgs[imgName];
        bg = new Layer().setImg(img);
        for (name in detail) {
          value = detail[name];
          switch (name) {
            case "main":
              this.mainLayer = bg;
              break;
            case "fixToBottom":
              bg.fixToBottom();
              break;
            default:
              bg[name] = value;
          }
        }
        this.camera.render(bg);
      }
      if (!this.mainLayer) {
        this.mainLayer = this.bgs[0];
      }
      this.menu = new BattlefieldMenu(this, Res.tpls['battlefield-menu']);
      return this.drawQueueAddAfter(this.menu);
    };

    Battlefield.prototype.win = function() {
      this.emit("win");
      return console.log("win!!!");
    };

    Battlefield.prototype.lose = function() {
      this.emit("lose");
      return console.log("lose!!!");
    };

    Battlefield.prototype.show = function() {
      var _this = this;
      return Battlefield.__super__.show.call(this, function() {
        return _this.menu.show();
      });
    };

    Battlefield.prototype.tick = function(tickDelay) {
      var monster, _i, _len, _ref, _results;
      this.player.tick(tickDelay);
      _ref = this.monsters;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        monster = _ref[_i];
        _results.push(monster.tick(tickDelay));
      }
      return _results;
    };

    Battlefield.prototype.setView = function(name, callback) {
      switch (name) {
        case "default":
        case "normal":
          return this.camera.animate({
            x: 0,
            y: 0,
            scale: 1
          }, 200, callback);
      }
    };

    return Battlefield;

  })(Stage);

}).call(this);
