class EventEmitter
  constructor:()->
    @_events = {}
  on:(event,callback)->
    #console.log this if debug
    @_events[event] = [] if not @_events[event]
    @_events[event].push callback
    return callback
  off:(event,listener)->
    if typeof listener is "function"
      for func in @_events[event]
        if func is listener
          Utils.removeItem @_events[event],func
          return
      console.log "cannot find listener #{listener} of #{event} in #{this} -- Suzaku.EventEmitter"
    else
      for func in @_events[event]
        func = null
      delete @_events[event]
  emit:(event)->
    return if !@_events[event]
    for func in @_events[event]
      func.apply this,Array.prototype.slice.call arguments,1
      
class Widget extends EventEmitter
  constructor:(creator)->
    super()
    if not creator
      console.error "need a creator! -- Suzaku.Widget"
      return
    @J = null
    @dom = null
    @template = null
    @creator = creator
    @UI = {}
    if typeof creator is 'string'
      if creator.indexOf("<")> -1 and creator.indexOf(">")>-1
        template = creator
        tempDiv = document.createElement "div"
        tempDiv.innerHTML = template
        @dom = tempDiv.children[0]
        @J = $ @dom if $
      else
        @J = $ creator if $
        @dom = document.querySelector creator
        if not @dom
          console.error "Wrong selector!: '#{creator}' cannot find element by this -- Suzaku.Widget"
          return
    if $ and creator instanceof $
      @J = creator
      @dom = @J[0]
    if creator instanceof window.HTMLElement or typeof creator.appendChild is "function"
      @dom = creator
      @J = $ @dom if $
    @_initUI()
  _initUI:(targetDom=@dom)->
    return if not targetDom.children
    for dom in targetDom.children
      if dom.children and dom.children.length > 0
        @_initUI dom
      did = dom.getAttribute "data-id"
      if did
        if not @UI[did]
          @UI[did] = dom
          dom.dom = dom
          dom.doms = [dom]
          dom.J = if $ then $ dom else null
          dom.remove = @remove
        else
          if $ then @UI[did].J.push dom
          @UI[did].doms.push dom
  remove:()->
    parent = @dom.parentElement or @dom.parentNode
    parent.removeChild @dom
  before:(target)->
    if target instanceof Widget
      target = target.dom
    if $ and target instanceof $
      target = target[0]
    if target instanceof HTMLElement
      target.parentElement.insertBefore @dom,target
    else
      console.error "invaild target!  --Suzaku.Widget"
  after:(target)->
    if target instanceof Widget
      target = target.dom
    if $ and target instanceof $
      target = target[0]
    if target instanceof HTMLElement
      parent = target.parentElement
      next = null
      for dom,index in parent.children 
        if dom is target and index < parent.children.length - 1
          next = parent.children[index+1]
      if next then parent.insertBefore @dom,next
      else parent.appendChild @dom
    else
      console.error "invaild target!  --Suzaku.Widget"
  replace:(target)->
    @before target
    if target instanceof Widget then target.remove()
    if $ and target instanceof $ then target.remove()
    parent = target.parentElement or target.parentNode
    if target instanceof HTMLElement then parent.removeChild target
  appendTo:(target)->
    if target instanceof Widget or target.dom instanceof window.HTMLElement
      return target.dom.appendChild @dom
    if $ and target instanceof $
      return target.append @dom
    if typeof target.appendChild is "function"
      return target.appendChild @dom
    
          
class TemplateManager extends EventEmitter
  constructor:()->
    super();
    @tplPath = "./templates/"
    @templates = {}
    @tplNames = []
  use:()->
    for item in arguments
      @tplNames.push item
  setPath:(path)->
    if typeof path isnt "string"
      return console.error "Illegal Path: #{path} --Suzaku.ApiManager"
    arr = path.split ''
    if arr[arr.length-1] isnt "/"
      arr.push "/"
    path = arr.join ''
    console.log 'set template file path:',path if debug
    @tplPath = path
    
  start:(callback)->
    @on "load",callback if typeof callback is "function"
    ajaxManager = new AjaxManager
    localDir = @tplPath
    for name in @tplNames
      url = if name.indexOf(".html")>-1 then localDir+name else localDir+name+".html"
      req = ajaxManager.addGetRequest url,null,(data,textStatus,req)=>
        @templates[req.Suzaku_tplName] = data
      req.Suzaku_tplName = name
    ajaxManager.start =>
      console.log "template loaded" if debug
      @emit "load",@templates
